{
  "swagger": "2.0",
  "info": {
    "title": "Trades Api v1",
    "version": "v1"
  },
  "host": "trades.roblox.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/v1/trades/{tradeId}": {
      "get": {
        "tags": [
          "Trades"
        ],
        "summary": "Gets detailed information about a trade.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tradeId",
            "description": "The trade id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Trades.Api.TradeDetailResponse"
            }
          },
          "400": {
            "description": "2: The trade cannot be found or you are not authorized to view it."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Trades:GetTradeDetails"
          ]
        }
      }
    },
    "/v1/trades/{tradeStatusType}": {
      "get": {
        "tags": [
          "Trades"
        ],
        "summary": "Fetches a list of the authenticated user's trades.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tradeStatusType",
            "description": "The trade status type.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "pattern": "^[a-z]*$",
            "enum": [
              1,
              2,
              3,
              4
            ]
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The number of results per request.",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "enum": [
              10,
              25,
              50,
              100
            ]
          },
          {
            "in": "query",
            "name": "cursor",
            "description": "The paging cursor for the previous or next page.",
            "type": "string"
          },
          {
            "in": "query",
            "name": "sortOrder",
            "description": "Sorted by trade creation date",
            "type": "string",
            "default": "Asc",
            "enum": [
              "Asc",
              "Desc"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Trades.Api.TradeResponse]"
            }
          },
          "400": {
            "description": "1: Invalid trade status type."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Trades:GetTrades"
          ]
        }
      }
    },
    "/v1/trades/{tradeStatusType}/count": {
      "get": {
        "tags": [
          "Trades"
        ],
        "summary": "Gets the total number of pending trades for the authenticated user.\r\nInbound is the only accepted tradeStatusType.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tradeStatusType",
            "description": "The trade status type to fetch a total count for.",
            "required": true,
            "type": "integer",
            "format": "int32",
            "enum": [
              1,
              2,
              3,
              4
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Trades.Api.TradeCountResponse"
            }
          },
          "400": {
            "description": "1: Invalid trade status type."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Trades:GetTradeCount"
          ]
        }
      }
    },
    "/v1/trades/metadata": {
      "get": {
        "tags": [
          "Trades"
        ],
        "summary": "Gets metadata about the trade system.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Trades.Api.TradeMetadata"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Trades:Metadata"
          ]
        }
      }
    },
    "/v1/users/{userId}/can-trade-with": {
      "get": {
        "tags": [
          "Trades"
        ],
        "summary": "Returns whether you can trade with another user.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The other user's id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Trades.Api.CanTradeResponse"
            }
          },
          "400": {
            "description": "10: Invalid trade partner. See field for whether the invalid partner is the sender or receiver."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Trades:CanTrade"
          ]
        }
      }
    },
    "/v1/trades/{tradeId}/accept": {
      "post": {
        "tags": [
          "Trades"
        ],
        "summary": "Accepts a trade.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tradeId",
            "description": "The trade id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "2: The trade cannot be found or you are not authorized to view it.\r\n3: The trade is inactive.\r\n4: You are not authorized to modify this trade.\r\n6: Trade needs to be confirmed by the other party.\r\n6: Trade needs to be confirmed by the other party.\r\n7: The user cannot trade. See field for whether the user who cannot trade is the sender or receiver.\r\n23: The trade reaches Two Step Verification thresholds and the user has not verified in the past time threshold."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "5: Trading system is unavailable"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Trades:AcceptTrade"
          ]
        }
      }
    },
    "/v1/trades/{tradeId}/counter": {
      "post": {
        "tags": [
          "Trades"
        ],
        "summary": "Counters a trade.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tradeId",
            "description": "The trade id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "tradeRequest",
            "description": "The trade request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Trades.Api.TradeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Trades.Api.NewTradeResponse"
            }
          },
          "400": {
            "description": "2: The trade cannot be found or you are not authorized to view it.\r\n4: You are not authorized to modify this trade.\r\n7: The user cannot trade. See field for whether the user who cannot trade is the sender or receiver.\r\n8: The trade request should include offers.\r\n9: Invalid number of trade offers.\r\n10: Invalid trade partner. See field for whether the invalid partner is the sender or receiver.\r\n11: Cannot add negative Robux amounts to a trade.\r\n12: One or more userAssets are invalid. See fieldData for details.\r\n13: Invalid number of userAssets in one side of the trade.\r\n15: The trade is unbalanced.\r\n16: Trade value ratio is not sufficient.\r\n17: You have insufficient Robux to make this offer.\r\n18: Too many Robux in one side of the offer. See field for whether the side is the sender or receiver.\r\n19: Unknown error while processing the trade.\r\n21: Cannot trade with yourself.\r\n22: User's privacy settings are too strict to allow trading. See field for whether the user is the sender or receiver."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "14: You are sending too many trade requests. Please slow down and try again later."
          },
          "502": {
            "description": "0: An unknown error occured."
          },
          "503": {
            "description": "5: Trading system is unavailable"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Trades:CounterTrade"
          ]
        }
      }
    },
    "/v1/trades/{tradeId}/decline": {
      "post": {
        "tags": [
          "Trades"
        ],
        "summary": "Declines a trade.",
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tradeId",
            "description": "The trade id.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "400": {
            "description": "2: The trade cannot be found or you are not authorized to view it.\r\n3: The trade is inactive.\r\n4: You are not authorized to modify this trade.\r\n7: The user cannot trade. See field for whether the user who cannot trade is the sender or receiver."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "503": {
            "description": "5: Trading system is unavailable"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Trades:DeclineTrade"
          ]
        }
      }
    },
    "/v1/trades/expire-outdated": {
      "post": {
        "tags": [
          "Trades"
        ],
        "summary": "Deprecated. TradeSession are automatically set to expire while the inbound/outbound trades are fetched.\r\nExpires Outdated Inbound Trades for User",
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Web.WebAPI.ApiEmptyResponseModel"
            }
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Trades:ExpireOutdatedTradesForUser"
          ]
        }
      }
    },
    "/v1/trades/send": {
      "post": {
        "tags": [
          "Trades"
        ],
        "summary": "Sends a trade.",
        "consumes": [
          "application/json",
          "text/json"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "tradeRequest",
            "description": "The trade request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Roblox.Trades.Api.TradeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Roblox.Trades.Api.NewTradeResponse"
            }
          },
          "400": {
            "description": "7: The user cannot trade. See field for whether the user who cannot trade is the sender or receiver.\r\n8: The trade request should include offers.\r\n9: Invalid number of trade offers.\r\n10: Invalid trade partner. See field for whether the invalid partner is the sender or receiver.\r\n11: Cannot add negative Robux amounts to a trade.\r\n12: One or more userAssets are invalid. See fieldData for details.\r\n13: Invalid number of userAssets in one side of the trade.\r\n15: The trade is unbalanced.\r\n16: Trade value ratio is not sufficient.\r\n17: You have insufficient Robux to make this offer.\r\n18: Too many Robux in one side of the offer. See field for whether the side is the sender or receiver.\r\n19: Unknown error while processing the trade.\r\n21: Cannot trade with yourself.\r\n22: User's privacy settings are too strict to allow trading. See field for whether the user is the sender or receiver.\r\n23: The trade reaches Two Step Verification thresholds and the user has not verified in the past time threshold."
          },
          "401": {
            "description": "0: Authorization has been denied for this request."
          },
          "403": {
            "description": "0: Token Validation Failed"
          },
          "429": {
            "description": "14: You are sending too many trade requests. Please slow down and try again later."
          },
          "502": {
            "description": "0: An unknown error occured."
          },
          "503": {
            "description": "5: Trading system is unavailable"
          }
        },
        "properties": {
          "internal": false,
          "metricIds": [
            "Trades:SendTrade"
          ]
        }
      }
    }
  },
  "definitions": {
    "Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.Int64]": {
      "type": "object",
      "properties": {
        "SortOrder": {
          "format": "int32",
          "description": " ['Asc' = 1, 'Desc' = 2]",
          "enum": [
            1,
            2
          ],
          "type": "integer",
          "readOnly": true
        },
        "PagingDirection": {
          "format": "int32",
          "description": " ['Forward' = 1, 'Backward' = 2]",
          "enum": [
            1,
            2
          ],
          "type": "integer",
          "readOnly": true
        },
        "Count": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "Roblox.Trades.Api.CanTradeResponse": {
      "type": "object",
      "properties": {
        "canTrade": {
          "description": "Returns true if you can trade with the given user.",
          "type": "boolean"
        },
        "status": {
          "format": "int32",
          "description": "If you can't trade with a user, status explains why you can't trade with them. ['Unknown' = 0, 'CanTrade' = 1, 'CannotTradeWithSelf' = 2, 'SenderCannotTrade' = 3, 'ReceiverCannotTrade' = 4, 'SenderPrivacyTooStrict' = 5, 'UsersCannotTrade' = 6, 'TradeAccepterNeedsFriction' = 7]",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "type": "integer"
        }
      }
    },
    "Roblox.Trades.Api.NewTradeResponse": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "description": "The trade id.",
          "type": "integer"
        }
      }
    },
    "Roblox.Trades.Api.TradeCountResponse": {
      "type": "object",
      "properties": {
        "count": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "Roblox.Trades.Api.TradeDetailResponse": {
      "type": "object",
      "properties": {
        "offers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Trades.Api.TradeOfferResponse"
          }
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "user": {
          "$ref": "#/definitions/Roblox.Web.Responses.Users.SkinnyUserResponse"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "expiration": {
          "format": "date-time",
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "status": {
          "format": "int32",
          "description": " ['Unknown' = 1, 'Open' = 2, 'Pending' = 3, 'Completed' = 4, 'Expired' = 5, 'Declined' = 6, 'RejectedDueToError' = 7, 'Countered' = 8, 'Processing' = 9, 'InterventionRequired' = 10, 'TwoStepVerificationRequired' = 11]",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11
          ],
          "type": "integer"
        }
      }
    },
    "Roblox.Trades.Api.TradeMetadata": {
      "type": "object",
      "properties": {
        "maxItemsPerSide": {
          "format": "int32",
          "type": "integer"
        },
        "minValueRatio": {
          "format": "float",
          "type": "number"
        },
        "tradeSystemMaxRobuxPercent": {
          "format": "float",
          "type": "number"
        },
        "tradeSystemRobuxFee": {
          "format": "double",
          "type": "number"
        }
      }
    },
    "Roblox.Trades.Api.TradeOfferRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "format": "int64",
          "type": "integer"
        },
        "userAssetIds": {
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "robux": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "Roblox.Trades.Api.TradeOfferResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/Roblox.Web.Responses.Users.SkinnyUserResponse"
        },
        "userAssets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Trades.Api.UserAssetResponse"
          }
        },
        "robux": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "Roblox.Trades.Api.TradeRequest": {
      "type": "object",
      "properties": {
        "offers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Trades.Api.TradeOfferRequest"
          }
        }
      }
    },
    "Roblox.Trades.Api.TradeResponse": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "user": {
          "$ref": "#/definitions/Roblox.Web.Responses.Users.SkinnyUserResponse"
        },
        "created": {
          "format": "date-time",
          "type": "string"
        },
        "expiration": {
          "format": "date-time",
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "status": {
          "format": "int32",
          "description": " ['Unknown' = 1, 'Open' = 2, 'Pending' = 3, 'Completed' = 4, 'Expired' = 5, 'Declined' = 6, 'RejectedDueToError' = 7, 'Countered' = 8, 'Processing' = 9, 'InterventionRequired' = 10, 'TwoStepVerificationRequired' = 11]",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11
          ],
          "type": "integer"
        }
      }
    },
    "Roblox.Trades.Api.UserAssetResponse": {
      "description": "A model containing information about a UserAsset.",
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "description": "The user asset id",
          "type": "integer"
        },
        "serialNumber": {
          "format": "int64",
          "description": "The serial number of the user asset",
          "type": "integer"
        },
        "assetId": {
          "format": "int64",
          "description": "The asset id of the user asset",
          "type": "integer"
        },
        "name": {
          "description": "The asset name of the asset",
          "type": "string"
        },
        "recentAveragePrice": {
          "format": "int64",
          "description": "The recent average price of the asset",
          "type": "integer"
        },
        "originalPrice": {
          "format": "int64",
          "description": "The original price of the asset",
          "type": "integer"
        },
        "assetStock": {
          "format": "int64",
          "description": "The asset stock.",
          "type": "integer"
        },
        "membershipType": {
          "format": "int32",
          "description": "The minimum MembershipType required to own the userAsset. ['None' = 0, 'BC' = 1, 'TBC' = 2, 'OBC' = 3, 'RobloxPremium' = 4]",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer"
        }
      }
    },
    "Roblox.Web.Responses.Users.SkinnyUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "Roblox.Web.WebAPI.ApiEmptyResponseModel": {
      "type": "object"
    },
    "Roblox.Web.WebAPI.ExclusiveStartRequest[System.Int64]": {
      "type": "object",
      "properties": {
        "ExclusiveStartKeyInfo": {
          "$ref": "#/definitions/Roblox.Platform.Core.ExclusiveStartPaging.IExclusiveStartKeyInfo[System.Int64]"
        },
        "CursorRecipe": {
          "type": "string"
        }
      }
    },
    "Roblox.Web.WebAPI.Models.ApiPageResponse[Roblox.Trades.Api.TradeResponse]": {
      "type": "object",
      "properties": {
        "previousPageCursor": {
          "type": "string"
        },
        "nextPageCursor": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Roblox.Trades.Api.TradeResponse"
          }
        }
      }
    }
  }
}